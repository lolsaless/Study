warnings()
p1 <- ggplot(data, aes(x=day, y=temperature)) +
geom_line(color="#69b3a2", linewidth=2) +
ggtitle("Temperature: range 1-10") +
theme_minimal() # change here
p2 <- ggplot(data, aes(x=day, y=price)) +
geom_line(color="grey",linewidth=2) +
ggtitle("Price: range 1-100") +
theme_minimal() # and here
# Display both charts side by side thanks to the patchwork package
p1 + p2
# Install Roboto Condensed font
hrbrthemes::import_roboto_condensed()
# Build dummy data
data <- data.frame(
day = as.Date("2019-01-01") + 0:99,
temperature = runif(100) + seq(1,100)^2.5 / 10000,
price = runif(100) + seq(100,1)^1.5 / 10
)
# Most basic line chart
p1 <- ggplot(data, aes(x=day, y=temperature)) +
geom_line(color="#69b3a2", linewidth=2) +
ggtitle("Temperature: range 1-10") +
theme_ipsum()
p2 <- ggplot(data, aes(x=day, y=price)) +
geom_line(color="grey",linewidth=2) +
ggtitle("Price: range 1-100") +
theme_ipsum()
# Display both charts side by side thanks to the patchwork package
p1 + p2
# Libraries
library(ggplot2)
library(dplyr)
library(patchwork) # To display 2 charts together
library(hrbrthemes)
# Install Roboto Condensed font
hrbrthemes::import_roboto_condensed()
# Build dummy data
data <- data.frame(
day = as.Date("2019-01-01") + 0:99,
temperature = runif(100) + seq(1,100)^2.5 / 10000,
price = runif(100) + seq(100,1)^1.5 / 10
)
# Most basic line chart
p1 <- ggplot(data, aes(x=day, y=temperature)) +
geom_line(color="#69b3a2", linewidth=2) +
ggtitle("Temperature: range 1-10") +
theme_ipsum()
p2 <- ggplot(data, aes(x=day, y=price)) +
geom_line(color="grey",linewidth=2) +
ggtitle("Price: range 1-100") +
theme_ipsum()
# Display both charts side by side thanks to the patchwork package
p1 + p2
warnings()
# Libraries
library(ggplot2)
library(dplyr)
library(patchwork) # To display 2 charts together
# Build dummy data
data <- data.frame(
day = as.Date("2019-01-01") + 0:99,
temperature = runif(100) + seq(1,100)^2.5 / 10000,
price = runif(100) + seq(100,1)^1.5 / 10
)
# Most basic line chart
p1 <- ggplot(data, aes(x=day, y=temperature)) +
geom_line(color="#69b3a2", linewidth=2) +  # changed size to linewidth
ggtitle("Temperature: range 1-10") +
theme_minimal()  # changed theme to minimal
p2 <- ggplot(data, aes(x=day, y=price)) +
geom_line(color="grey",linewidth=2) +  # changed size to linewidth
ggtitle("Price: range 1-100") +
theme_minimal()  # changed theme to minimal
# Display both charts side by side thanks to the patchwork package
p1 + p2
# Start with a usual ggplot2 call:
ggplot(data, aes(x=day, y=temperature)) +
# Custom the Y scales:
scale_y_continuous(
# Features of the first axis
name = "First Axis",
# Add a second axis and specify its features
sec.axis = sec_axis( trans=~.*10, name="Second Axis")
) +
theme_ipsum()
# Value used to transform the data
coeff <- 10
ggplot(data, aes(x=day)) +
geom_line( aes(y=temperature)) +
geom_line( aes(y=price / coeff)) + # Divide by 10 to get the same range than the temperature
scale_y_continuous(
# Features of the first axis
name = "First Axis",
# Add a second axis and specify its features
sec.axis = sec_axis(~.*coeff, name="Second Axis")
)
# Value used to transform the data
coeff <- 10
# A few constants
temperatureColor <- "#69b3a2"
priceColor <- rgb(0.2, 0.6, 0.9, 1)
ggplot(data, aes(x=day)) +
geom_line( aes(y=temperature), size=2, color=temperatureColor) +
geom_line( aes(y=price / coeff), size=2, color=priceColor) +
scale_y_continuous(
# Features of the first axis
name = "Temperature (Celsius °)",
# Add a second axis and specify its features
sec.axis = sec_axis(~.*coeff, name="Price ($)")
) +
theme_ipsum() +
theme(
axis.title.y = element_text(color = temperatureColor, size=13),
axis.title.y.right = element_text(color = priceColor, size=13)
) +
ggtitle("Temperature down, price up")
warnings()
# Value used to transform the data
coeff <- 10
# A few constants
temperatureColor <- "#69b3a2"
priceColor <- rgb(0.2, 0.6, 0.9, 1)
ggplot(data, aes(x=day)) +
geom_line( aes(y=temperature), linewidth=2, color=temperatureColor) +
geom_line( aes(y=price / coeff), linewidth=2, color=priceColor) +
scale_y_continuous(
# Features of the first axis
name = "Temperature (Celsius °)",
# Add a second axis and specify its features
sec.axis = sec_axis(~.*coeff, name="Price ($)")
) +
theme_minimal() +
theme(
axis.title.y = element_text(color = temperatureColor, size=13),
axis.title.y.right = element_text(color = priceColor, size=13)
) +
ggtitle("Temperature down, price up")
# Libraries
library(tidyverse)
library(hrbrthemes)
library(viridis)
# create a dataset
data <- data.frame(
name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
# Plot
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
warnings()
# create a dataset
data <- data.frame(
name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
# Plot
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_ipsum() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# create a dataset
data <- data.frame(
name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
# Plot
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot() +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_minimal() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Load ggplot2
library(ggplot2)
# The mpg dataset is natively available
#head(mpg)
# geom_boxplot proposes several arguments to custom appearance
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(
# custom boxes
color="blue",
fill="blue",
alpha=0.2,
# Notch?
notch=TRUE,
notchwidth = 0.8,
# custom outliers
outlier.colour="red",
outlier.fill="red",
outlier.size=3
)
# geom_boxplot proposes several arguments to custom appearance
ggplot(mpg, aes(x=class, y=hwy)) +
geom_boxplot(
# custom boxes
color="blue",
fill="blue",
alpha=0.2,
# Notch?
notch=FALSE,
notchwidth = 0.8,
# custom outliers
outlier.colour="red",
outlier.fill="red",
outlier.size=3
)
# create a dataset
data <- data.frame(
name=c( rep("A",500), rep("B",500), rep("B",500), rep("C",20), rep('D', 100)  ),
value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) )
)
# Plot
data %>%
ggplot( aes(x=name, y=value, fill=name)) +
geom_boxplot(notch = TRUE,
notchwidth = 0.8) +
scale_fill_viridis(discrete = TRUE, alpha=0.6) +
geom_jitter(color="black", size=0.4, alpha=0.9) +
theme_minimal() +
theme(
legend.position="none",
plot.title = element_text(size=11)
) +
ggtitle("A boxplot with jitter") +
xlab("")
# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables
library(GGally)
install.packages("GGally")
# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables
library(GGally)
# Create data
data <- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1))
data$v4 = data$var1 ** 2
data$v5 = -(data$var1 ** 2)
# Check correlations (as scatterplots), distribution and print corrleation coefficient
ggpairs(data, title="correlogram with ggpairs()")
# Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables
library(GGally)
# Create data
data <- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1))
data$v4 = data$var1 ** 2
data$v5 = -(data$var1 ** 2)
# Check correlations (as scatterplots), distribution and print corrleation coefficient
ggpairs(data, title="correlogram with ggpairs()")
library(readr)
csv_exam <- read_csv("D:/Study/4. 교육/R 교육/Doit_R/Data/csv_exam.csv")
View(csv_exam)
mpg
mpg
library(ggplot2)
mpg
mpg$tot <- (mpg$cty + mpg$hwy)/2
mpg$tot
aggregate(data = mpg[mpg$class == "compact" | mpg$class == "suv", ], class, mean)
aggregate(data = mpg[mpg$class == "compact" | mpg$class == "suv", ], tot ~ class, mean)
aggregate(data = mpg[mpg$class == "compact" | mpg$class == "suv", ], class ~ tot, mean)
?aggregate
library(ggplot2)
#SET color and size to make dots stand out more
ggplot(sleepstudy, aes(x=Subject, y=res)) +
geom_point() +
stat_summary(color="red", size=1)
library(tidyverse)
library(Hmisc)
library(nlme)
install.packages("Hmisc")
library(tidyverse)
library(Hmisc)
library(lme4)
library(nlme)
library(ggplot2)
#SET color and size to make dots stand out more
ggplot(sleepstudy, aes(x=Subject, y=res)) +
geom_point() +
stat_summary(color="red", size=1)
sleepstudy
lm1 <- lm(Reaction ~ Days, sleepstudy)
summary(lm1)
#linear model
sleepstudy$res <- residuals(lm1)
sleepstudy$fit <- predict(lm1)
ggplot(sleepstudy, aes(x=fit, y=res)) +
geom_point() +
geom_smooth()
#SET color and size to make dots stand out more
ggplot(sleepstudy, aes(x=Subject, y=res)) +
geom_point() +
stat_summary(color="red", size=1)
res
sleepstudy
library(readxl)
library(tidyverse)
data <- read_xlsx("/study/2. 연구사업(2023년)/6. 분석결과/2023_연구사업 제품수_Ca, Na, Mg, F 함량정보.xlsx")
setwd("D:/Study/2. 연구사업(2023년)/6. 분석결과")
data <- read_xlsx("D:/Study/2. 연구사업(2023년)/6. 분석결과/2023_연구사업 제품수_Ca, Na, Mg, F 함량정보.xlsx")
data <- read_xlsx("D:/Study/2. 연구사업(2023년)/6. 분석결과/2023_연구사업 제품수_Ca, Na, Mg, K, F 함량정보.xlsx")
data <- read_xlsx("D:/Study/2. 연구사업(2023년)/6. 분석결과/2023_연구사업 제품수_Ca, Na, Mg, K, F 함량 정보.xlsx")
view(data)
# Load the data
df <- data
# Select the products
selected_products <- c("제주삼다수", "에브리데이산수")
# Filter the dataframe for the selected products
filtered_df <- df[df$제품명 %in% selected_products,]
# Split the data into min and max
df_min <- filtered_df[filtered_df$구분 == '최소',]
df_max <- filtered_df[filtered_df$구분 == '최대',]
# Melt the dataframes to long format
df_min_melt <- reshape2::melt(df_min, id.vars = c('제품명', '구분'))
df_max_melt <- reshape2::melt(df_max, id.vars = c('제품명', '구분'))
# Create the plot
ggplot() +
geom_bar(data = df_min_melt, aes(x = variable, y = -value, fill = 제품명), stat = "identity", position = "dodge") +
geom_bar(data = df_max_melt, aes(x = variable, y = value, fill = 제품명), stat = "identity", position = "dodge") +
labs(x = "Element", y = "Value") +
theme_minimal() +
coord_flip()
# Select the products
selected_products <- c("제주삼다수", "에브리데이산수")
# Filter the dataframe for the selected products
filtered_df <- df[df$제품명 %in% selected_products,]
# Split the data into min and max
df_min <- filtered_df[filtered_df$구분 == '최소',]
df_max <- filtered_df[filtered_df$구분 == '최대',]
# Melt the dataframes to long format
df_min_melt <- reshape2::melt(df_min, id.vars = c('제품명', '구분'))
df_max_melt <- reshape2::melt(df_max, id.vars = c('제품명', '구분'))
# Create the plot
ggplot() +
geom_col(data = df_min_melt, aes(x = variable, y = -value, fill = 제품명), position = "dodge") +
geom_col(data = df_max_melt, aes(x = variable, y = value, fill = 제품명), position = "dodge") +
labs(x = "Element", y = "Value") +
theme_minimal() +
coord_flip()
# Select the products
selected_products <- c("제주삼다수", "에브리데이산수")
# Filter the dataframe for the selected products
filtered_df <- df[df$제품명 %in% selected_products,]
# Split the data into min and max
df_min <- filtered_df[filtered_df$구분 == '최소',]
df_max <- filtered_df[filtered_df$구분 == '최대',]
# Melt the dataframes to long format
df_min_melt <- reshape2::melt(df_min, id.vars = c('제품명', '구분'))
df_max_melt <- reshape2::melt(df_max, id.vars = c('제품명', '구분'))
# Create a new value column for df_min_melt with negative values
df_min_melt$value_negative <- -df_min_melt$value
# Select the products
selected_products <- c("제주삼다수", "에브리데이산수")
# Filter the dataframe for the selected products
filtered_df <- df[df$제품명 %in% selected_products,]
# Split the data into min and max
df_min <- filtered_df[filtered_df$구분 == '최소',]
df_max <- filtered_df[filtered_df$구분 == '최대',]
# Melt the dataframes to long format
df_min_melt <- reshape2::melt(df_min, id.vars = c('제품명', '구분'))
df_max_melt <- reshape2::melt(df_max, id.vars = c('제품명', '구분'))
# Create a new value column for df_min_melt with negative values
df_min_melt$value_negative <- -df_min_melt$value
# Create a new value column for df_min_melt with negative values
df_min_melt$value_negative <- -df_min_melt$value
# Create the plot
ggplot() +
geom_col(data = df_min_melt, aes(x = variable, y = value_negative, fill = 제품명), position = "dodge") +
geom_col(data = df_max_melt, aes(x = variable, y = value, fill = 제품명), position = "dodge") +
labs(x = "Element", y = "Value") +
theme_minimal() +
coord_flip()
# Create a new value column for df_min_melt with negative values
df_min_melt$value_negative <- -df_min_melt$value
# Convert the value column to numeric
df_min_melt$value <- as.numeric(df_min_melt$value)
# Select the products
selected_products <- c("제주삼다수", "에브리데이산수")
# Filter the dataframe for the selected products
filtered_df <- df[df$제품명 %in% selected_products,]
# Split the data into min and max
df_min <- filtered_df[filtered_df$구분 == '최소',]
df_max <- filtered_df[filtered_df$구분 == '최대',]
# Melt the dataframes to long format
df_min_melt <- reshape2::melt(df_min, id.vars = c('제품명', '구분'))
df_max_melt <- reshape2::melt(df_max, id.vars = c('제품명', '구분'))
# Convert the value column to numeric
df_min_melt$value <- as.numeric(df_min_melt$value)
# Create a new value column for df_min_melt with negative values
df_min_melt$value_negative <- -df_min_melt$value
# Create a new value column for df_min_melt with negative values
df_min_melt$value_negative <- -df_min_melt$value
# Create the plot
ggplot() +
geom_col(data = df_min_melt, aes(x = variable, y = value_negative, fill = 제품명), position = "dodge") +
geom_col(data = df_max_melt, aes(x = variable, y = value, fill = 제품명), position = "dodge") +
labs(x = "Element", y = "Value") +
theme_minimal() +
coord_flip()
View(data)
# Load the data
df <- data
# Install necessary packages if not already installed
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("readxl")) install.packages("readxl")
if (!require("reshape2")) install.packages("reshape2")
# Load necessary libraries
library(ggplot2)
library(readxl)
library(reshape2)
# Load the data
df <- data
# Select the products
selected_products <- c("제주삼다수", "에브리데이산수")
# Filter the dataframe for the selected products
filtered_df <- df[df$제품명 %in% selected_products,]
# Split the data into min and max
df_min <- filtered_df[filtered_df$구분 == '최소',]
df_max <- filtered_df[filtered_df$구분 == '최대',]
# Melt the dataframes to long format
df_min_melt <- melt(df_min, id.vars = c('제품명', '구분'))
df_max_melt <- melt(df_max, id.vars = c('제품명', '구분'))
# Create a new value column for df_min_melt with negative values
df_min_melt$value_negative <- -df_min_melt$value
# Create the plot
ggplot() +
geom_col(data = df_min_melt, aes(x = variable, y = value_negative, fill = 제품명), position = "dodge") +
geom_col(data = df_max_melt, aes(x = variable, y = value, fill = 제품명), position = "dodge") +
labs(x = "Element", y = "Value") +
theme_minimal() +
coord_flip()
# Check the class of df_min_melt$value
print(class(df_min_melt$value))
# If it is not numeric, convert it
if (class(df_min_melt$value) != "numeric") {
df_min_melt$value <- as.numeric(df_min_melt$value)
}
# If it is not numeric, convert it
if (class(df_min_melt$value) != "numeric") {
df_min_melt$value <- as.numeric(df_min_melt$value)
}
# Retry the creation of the new column
df_min_melt$value_negative <- -df_min_melt$value
# Create a new value column for df_min_melt with negative values
df_min_melt$value_negative <- -df_min_melt$value
# Create the plot
ggplot() +
geom_col(data = df_min_melt, aes(x = variable, y = value_negative, fill = 제품명), position = "dodge") +
geom_col(data = df_max_melt, aes(x = variable, y = value, fill = 제품명), position = "dodge") +
labs(x = "Element", y = "Value") +
theme_minimal() +
coord_flip()
# Check the class of df_min_melt$value
print(class(df_min_melt$value))
# If it is not numeric, convert it
if (class(df_min_melt$value) != "numeric") {
df_min_melt$value <- as.numeric(df_min_melt$value)
}
# Retry the creation of the new column
df_min_melt$value_negative <- -df_min_melt$value
# Create a new value column for df_min_melt with negative values
df_min_melt$value_negative <- -df_min_melt$value
# Create the plot
ggplot() +
geom_col(data = df_min_melt, aes(x = variable, y = value_negative, fill = 제품명), position = "dodge") +
geom_col(data = df_max_melt, aes(x = variable, y = value, fill = 제품명), position = "dodge") +
labs(x = "Element", y = "Value") +
theme_minimal() +
coord_flip()
str(data)
# 데이터를 '긴 형식'으로 변환
data_long <- data %>%
pivot_longer(cols = c(Ca, K, Na, Mg, F), names_to = "Element", values_to = "Value") %>%
filter(제품명 == '제주삼다수')
# 그래프 생성
ggplot(data_long, aes(x=Element, y=Value, fill=구분)) +
geom_bar(stat="identity", position=position_dodge()) +
labs(x="Element", y="Value", fill="구분") +
theme_minimal() +
facet_wrap(~제품명) # 이 부분은 제품별로 그래프를 나누는 코드입니다.
# 데이터를 '긴 형식'으로 변환
data_long <- data %>%
pivot_longer(cols = c(Ca, K, Na, Mg, F), names_to = "Element", values_to = "Value") %>%
mutate(ValAdj = if_else(구분 == "최소", -Value, Value))  # 최소값을 음수로 변환
# 그래프 생성
ggplot(data_long, aes(x=Element, y=ValAdj, fill=구분)) +
geom_bar(stat="identity", position="identity") +
coord_flip() +  # x축과 y축을 바꾸어 수평 막대 그래프로 만듭니다.
labs(x="Element", y="Value", fill="구분") +
scale_y_continuous(labels = abs, breaks = seq(-30, 30, by = 10)) +  # y축 레이블을 절댓값으로 표시
theme_minimal() +
facet_wrap(~제품명, scales = "free_y")  # 제품별로 그래프를 나눕니다.
